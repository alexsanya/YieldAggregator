/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Aggregator, AggregatorInterface } from "../Aggregator";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum Aggregator.Market",
        name: "market",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "Rebalance",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "enum Aggregator.Market",
        name: "_market",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "weth_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "rebalance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610393806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80633ccfd60b146100465780637d7c2a1c14610064578063f4d4c9d714610082575b600080fd5b61004e61009e565b60405161005b9190610187565b60405180910390f35b61006c6100e3565b60405161007991906101e3565b60405180910390f35b61009c60048036038101906100979190610254565b610131565b005b600080607b90507f4e70a604b23a8edee2b1d0a656e9b9c00b73ad8bb1afc2c59381ee9f69197de7816040516100d49190610187565b60405180910390a18091505090565b600080600190506000600290507f6dcf4e69cd04d9def52d660ea37a5b366adb7701505e48e75c03d6a51a343f648282604051610121929190610294565b60405180910390a1809250505090565b7f1d6bb4e583d7da423b02deed80468e06912cf1211d817d091ddddb7c63492e608282604051610162929190610334565b60405180910390a15050565b6000819050919050565b6101818161016e565b82525050565b600060208201905061019c6000830184610178565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101cd826101a2565b9050919050565b6101dd816101c2565b82525050565b60006020820190506101f860008301846101d4565b92915050565b600080fd5b6002811061021057600080fd5b50565b60008135905061022281610203565b92915050565b6102318161016e565b811461023c57600080fd5b50565b60008135905061024e81610228565b92915050565b6000806040838503121561026b5761026a6101fe565b5b600061027985828601610213565b925050602061028a8582860161023f565b9150509250929050565b60006040820190506102a960008301856101d4565b6102b660208301846101d4565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600281106102fd576102fc6102bd565b5b50565b600081905061030e826102ec565b919050565b600061031e82610300565b9050919050565b61032e81610313565b82525050565b60006040820190506103496000830185610325565b6103566020830184610178565b939250505056fea26469706673582212208f3af5afed10ec23e462fd33e7c039c93a3670673014fc0f936dcb577b66f01e64736f6c63430008120033";

type AggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Aggregator__factory extends ContractFactory {
  constructor(...args: AggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Aggregator> {
    return super.deploy(overrides || {}) as Promise<Aggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Aggregator {
    return super.attach(address) as Aggregator;
  }
  override connect(signer: Signer): Aggregator__factory {
    return super.connect(signer) as Aggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AggregatorInterface {
    return new utils.Interface(_abi) as AggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Aggregator {
    return new Contract(address, _abi, signerOrProvider) as Aggregator;
  }
}
