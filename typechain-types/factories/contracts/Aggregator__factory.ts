/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Aggregator,
  AggregatorInterface,
} from "../../contracts/Aggregator";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum Aggregator.Market",
        name: "market",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "Rebalance",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [],
    name: "AAVE_V3_MAINNET_POOL_ADDRESS_PROVIDER_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "COMPOUND_V3_PROXY_MAINNET_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH_MAINNET_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Aggregator.Market",
        name: "_market",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "weth_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fundsDepositedInto",
    outputs: [
      {
        internalType: "enum Aggregator.Protocol",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rebalance",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c06040526002600060146101000a81548160ff0219169083600281111561002a576100296101b9565b5b021790555034801561003b57600080fd5b5061005861004d6100ed60201b60201c565b6100f560201b60201c565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505073a17581a9e3356d9a858b789d68b4d866e593ae9473ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250506101e8565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a051611032610230600039600081816108ad015261093001526000818161042101528181610711015281816107cc01528181610871015261096c01526110326000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637d7c2a1c116100665780637d7c2a1c146101255780638da5cb5b14610143578063bff0c0fc14610161578063f2fde38b1461017f578063f4d4c9d71461019b5761009e565b80630ffd2343146100a357806329f053d1146100c157806333bba7ed146100df5780633ccfd60b146100fd578063715018a61461011b575b600080fd5b6100ab6101b7565b6040516100b89190610a52565b60405180910390f35b6100c96101cf565b6040516100d69190610ae4565b60405180910390f35b6100e76101e2565b6040516100f49190610a52565b60405180910390f35b6101056101fa565b6040516101129190610b18565b60405180910390f35b610123610273565b005b61012d610287565b60405161013a9190610a52565b60405180910390f35b61014b6102de565b6040516101589190610a52565b60405180910390f35b610169610307565b6040516101769190610a52565b60405180910390f35b61019960048036038101906101949190610b64565b61031f565b005b6101b560048036038101906101b09190610be2565b6103a2565b005b73a17581a9e3356d9a858b789d68b4d866e593ae9481565b600060149054906101000a900460ff1681565b732f39d218133afab8f2b819b1066c7e434ad94e9e81565b6000610204610541565b6000607b90507f4e70a604b23a8edee2b1d0a656e9b9c00b73ad8bb1afc2c59381ee9f69197de7816040516102399190610b18565b60405180910390a16002600060146101000a81548160ff0219169083600281111561026757610266610a6d565b5b02179055508091505090565b61027b610541565b61028560006105bf565b565b6000610291610541565b6000600190506000600290507f6dcf4e69cd04d9def52d660ea37a5b366adb7701505e48e75c03d6a51a343f6482826040516102ce929190610c22565b60405180910390a1809250505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b610327610541565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161038d90610cce565b60405180910390fd5b61039f816105bf565b50565b6103aa610541565b6002808111156103bd576103bc610a6d565b5b600060149054906101000a900460ff1660028111156103df576103de610a6d565b5b1461041f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041690610d60565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161047c93929190610d80565b6020604051808303816000875af115801561049b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104bf9190610def565b50600060028111156104d4576104d3610a6d565b5b8260028111156104e7576104e6610a6d565b5b036104fa576104f581610683565b610504565b6105038161086f565b5b7f1d6bb4e583d7da423b02deed80468e06912cf1211d817d091ddddb7c63492e608282604051610535929190610e64565b60405180910390a15050565b610549610a09565b73ffffffffffffffffffffffffffffffffffffffff166105676102de565b73ffffffffffffffffffffffffffffffffffffffff16146105bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b490610ed9565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000732f39d218133afab8f2b819b1066c7e434ad94e9e73ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107089190610f0e565b905060008190507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b382856040518363ffffffff1660e01b815260040161076a929190610f3b565b6020604051808303816000875af1158015610789573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ad9190610def565b508073ffffffffffffffffffffffffffffffffffffffff1663617ba0377f0000000000000000000000000000000000000000000000000000000000000000853060006040518563ffffffff1660e01b815260040161080e9493929190610fb7565b600060405180830381600087803b15801561082857600080fd5b505af115801561083c573d6000803e3d6000fd5b5050505060008060146101000a81548160ff0219169083600281111561086557610864610a6d565b5b0217905550505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016108ea929190610f3b565b6020604051808303816000875af1158015610909573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061092d9190610def565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f2b9fdb87f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b81526004016109a9929190610f3b565b600060405180830381600087803b1580156109c357600080fd5b505af11580156109d7573d6000803e3d6000fd5b505050506001600060146101000a81548160ff02191690836002811115610a0157610a00610a6d565b5b021790555050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a3c82610a11565b9050919050565b610a4c81610a31565b82525050565b6000602082019050610a676000830184610a43565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110610aad57610aac610a6d565b5b50565b6000819050610abe82610a9c565b919050565b6000610ace82610ab0565b9050919050565b610ade81610ac3565b82525050565b6000602082019050610af96000830184610ad5565b92915050565b6000819050919050565b610b1281610aff565b82525050565b6000602082019050610b2d6000830184610b09565b92915050565b600080fd5b610b4181610a31565b8114610b4c57600080fd5b50565b600081359050610b5e81610b38565b92915050565b600060208284031215610b7a57610b79610b33565b5b6000610b8884828501610b4f565b91505092915050565b60038110610b9e57600080fd5b50565b600081359050610bb081610b91565b92915050565b610bbf81610aff565b8114610bca57600080fd5b50565b600081359050610bdc81610bb6565b92915050565b60008060408385031215610bf957610bf8610b33565b5b6000610c0785828601610ba1565b9250506020610c1885828601610bcd565b9150509250929050565b6000604082019050610c376000830185610a43565b610c446020830184610a43565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610cb8602683610c4b565b9150610cc382610c5c565b604082019050919050565b60006020820190508181036000830152610ce781610cab565b9050919050565b7f596f752073686f756c64207769746864726177206265666f72652072652d646560008201527f706f736974000000000000000000000000000000000000000000000000000000602082015250565b6000610d4a602583610c4b565b9150610d5582610cee565b604082019050919050565b60006020820190508181036000830152610d7981610d3d565b9050919050565b6000606082019050610d956000830186610a43565b610da26020830185610a43565b610daf6040830184610b09565b949350505050565b60008115159050919050565b610dcc81610db7565b8114610dd757600080fd5b50565b600081519050610de981610dc3565b92915050565b600060208284031215610e0557610e04610b33565b5b6000610e1384828501610dda565b91505092915050565b60038110610e2d57610e2c610a6d565b5b50565b6000819050610e3e82610e1c565b919050565b6000610e4e82610e30565b9050919050565b610e5e81610e43565b82525050565b6000604082019050610e796000830185610e55565b610e866020830184610b09565b9392505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610ec3602083610c4b565b9150610ece82610e8d565b602082019050919050565b60006020820190508181036000830152610ef281610eb6565b9050919050565b600081519050610f0881610b38565b92915050565b600060208284031215610f2457610f23610b33565b5b6000610f3284828501610ef9565b91505092915050565b6000604082019050610f506000830185610a43565b610f5d6020830184610b09565b9392505050565b6000819050919050565b600061ffff82169050919050565b6000819050919050565b6000610fa1610f9c610f9784610f64565b610f7c565b610f6e565b9050919050565b610fb181610f86565b82525050565b6000608082019050610fcc6000830187610a43565b610fd96020830186610b09565b610fe66040830185610a43565b610ff36060830184610fa8565b9594505050505056fea2646970667358221220633efe2d934e7b80761f9dc22ff87a28556b50fc40de82d871f1e55d630feedd64736f6c63430008120033";

type AggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Aggregator__factory extends ContractFactory {
  constructor(...args: AggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Aggregator> {
    return super.deploy(overrides || {}) as Promise<Aggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Aggregator {
    return super.attach(address) as Aggregator;
  }
  override connect(signer: Signer): Aggregator__factory {
    return super.connect(signer) as Aggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AggregatorInterface {
    return new utils.Interface(_abi) as AggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Aggregator {
    return new Contract(address, _abi, signerOrProvider) as Aggregator;
  }
}
