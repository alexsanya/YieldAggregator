/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Aggregator,
  AggregatorInterface,
} from "../../contracts/Aggregator";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum Aggregator.Market",
        name: "market",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposit",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum Aggregator.Market",
        name: "from",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "enum Aggregator.Market",
        name: "to",
        type: "uint8",
      },
    ],
    name: "Rebalance",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum Aggregator.Market",
        name: "market",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Withdrawal",
    type: "event",
  },
  {
    inputs: [],
    name: "AAVE_A_WETH_MAINNET_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "AAVE_V3_MAINNET_POOL_ADDRESS_PROVIDER_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "COMPOUND_V3_PROXY_MAINNET_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "WETH_MAINNET_ADDRESS",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum Aggregator.Market",
        name: "_market",
        type: "uint8",
      },
      {
        internalType: "uint256",
        name: "weth_amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "fundsDepositedInto",
    outputs: [
      {
        internalType: "enum Aggregator.Protocol",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAavePoolAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "rebalance",
    outputs: [
      {
        internalType: "enum Aggregator.Market",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "withdraw",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e06040526002600060146101000a81548160ff021916908360028111156200002d576200002c6200020a565b5b02179055503480156200003f57600080fd5b5062000060620000546200013e60201b60201c565b6200014660201b60201c565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050734d5f47fa6a74757f35c14fd3a6ef8e3c9bc514e873ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505073a17581a9e3356d9a858b789d68b4d866e593ae9473ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff168152505062000239565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c0516119c1620002c4600039600081816109c401528181610a2101528181610f650152610fe801526000610bb60152600081816103140152818161042d0152818161082201528181610a0001528181610b0a01528181610c9101528181610d3601528181610f2901528181611024015281816110cf015261118a01526119c16000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80637d7c2a1c116100715780637d7c2a1c146101595780638da5cb5b14610177578063a4b1f5e414610195578063bff0c0fc146101b3578063f2fde38b146101d1578063f4d4c9d7146101ed576100b4565b80630ffd2343146100b957806329f053d1146100d757806333bba7ed146100f55780633ccfd60b146101135780636112aeaf14610131578063715018a61461014f575b600080fd5b6100c1610209565b6040516100ce9190611275565b60405180910390f35b6100df610221565b6040516100ec9190611307565b60405180910390f35b6100fd610234565b60405161010a9190611275565b60405180910390f35b61011b61024c565b604051610128919061133b565b60405180910390f35b610139610537565b6040516101469190611275565b60405180910390f35b610157610546565b005b61016161055a565b60405161016e919061139e565b60405180910390f35b61017f6106c7565b60405161018c9190611275565b60405180910390f35b61019d6106f0565b6040516101aa9190611275565b60405180910390f35b6101bb610708565b6040516101c89190611275565b60405180910390f35b6101eb60048036038101906101e691906113ea565b610720565b005b61020760048036038101906102029190611468565b6107a3565b005b73a17581a9e3356d9a858b789d68b4d866e593ae9481565b600060149054906101000a900460ff1681565b732f39d218133afab8f2b819b1066c7e434ad94e9e81565b6000610256610942565b60028081111561026957610268611290565b5b600060149054906101000a900460ff16600281111561028b5761028a611290565b5b036102cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c290611505565b60405180910390fd5b600160028111156102df576102de611290565b5b600060149054906101000a900460ff16600281111561030157610300611290565b5b0361041f5760006103106109c0565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161036d929190611525565b6020604051808303816000875af115801561038c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103b09190611586565b506002600060146101000a81548160ff021916908360028111156103d7576103d6611290565b5b02179055507f08eeb3fbbcf9438aa9fd119952d5f42176050799525cdfc56f3793bb84bf350360018260405161040e9291906115b3565b60405180910390a180915050610534565b6000610429610ba7565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610486929190611525565b6020604051808303816000875af11580156104a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c99190611586565b506002600060146101000a81548160ff021916908360028111156104f0576104ef611290565b5b02179055507f08eeb3fbbcf9438aa9fd119952d5f42176050799525cdfc56f3793bb84bf35036000826040516105279291906115b3565b60405180910390a1809150505b90565b6000610541610dd4565b905090565b61054e610942565b6105586000610e63565b565b6000610564610942565b60028081111561057757610576611290565b5b600060149054906101000a900460ff16600281111561059957610598611290565b5b036105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090611628565b60405180910390fd5b600060028111156105ed576105ec611290565b5b600060149054906101000a900460ff16600281111561060f5761060e611290565b5b0361066e57600061061e610ba7565b905061062981610f27565b7f3bf67ba50d14ef324f957808f6b00a77c3c857c9d41422fd2ab8dd6c3710327c6000600160405161065c929190611648565b60405180910390a160019150506106c4565b60006106786109c0565b9050610683816110c1565b7f3bf67ba50d14ef324f957808f6b00a77c3c857c9d41422fd2ab8dd6c3710327c600160006040516106b6929190611648565b60405180910390a160009150505b90565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b734d5f47fa6a74757f35c14fd3a6ef8e3c9bc514e881565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b610728610942565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610797576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161078e906116e3565b60405180910390fd5b6107a081610e63565b50565b6107ab610942565b6002808111156107be576107bd611290565b5b600060149054906101000a900460ff1660028111156107e0576107df611290565b5b14610820576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081790611775565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161087d93929190611795565b6020604051808303816000875af115801561089c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c09190611586565b50600060028111156108d5576108d4611290565b5b8260028111156108e8576108e7611290565b5b036108fb576108f6816110c1565b610905565b61090481610f27565b5b7f1d6bb4e583d7da423b02deed80468e06912cf1211d817d091ddddb7c63492e6082826040516109369291906115b3565b60405180910390a15050565b61094a61122c565b73ffffffffffffffffffffffffffffffffffffffff166109686106c7565b73ffffffffffffffffffffffffffffffffffffffff16146109be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109b590611818565b60405180910390fd5b565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f3fef3a37f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a789190611275565b602060405180830381865afa158015610a95573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab9919061184d565b6040518363ffffffff1660e01b8152600401610ad6929190611525565b600060405180830381600087803b158015610af057600080fd5b505af1158015610b04573d6000803e3d6000fd5b505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b619190611275565b602060405180830381865afa158015610b7e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba2919061184d565b905090565b600080610bb2610dd4565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b3827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040518363ffffffff1660e01b8152600401610c2f929190611525565b6020604051808303816000875af1158015610c4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c729190611586565b508073ffffffffffffffffffffffffffffffffffffffff166369328dec7f00000000000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff306040518463ffffffff1660e01b8152600401610cf09392919061187a565b6020604051808303816000875af1158015610d0f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d33919061184d565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610d8d9190611275565b602060405180830381865afa158015610daa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dce919061184d565b91505090565b600080732f39d218133afab8f2b819b1066c7e434ad94e9e73ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e36573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5a91906118c6565b90508091505090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401610fa2929190611525565b6020604051808303816000875af1158015610fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fe59190611586565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663f2b9fdb87f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401611061929190611525565b600060405180830381600087803b15801561107b57600080fd5b505af115801561108f573d6000803e3d6000fd5b505050506001600060146101000a81548160ff021916908360028111156110b9576110b8611290565b5b021790555050565b60006110cb610dd4565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b382846040518363ffffffff1660e01b8152600401611128929190611525565b6020604051808303816000875af1158015611147573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116b9190611586565b508073ffffffffffffffffffffffffffffffffffffffff1663617ba0377f0000000000000000000000000000000000000000000000000000000000000000843060006040518563ffffffff1660e01b81526004016111cc9493929190611946565b600060405180830381600087803b1580156111e657600080fd5b505af11580156111fa573d6000803e3d6000fd5b5050505060008060146101000a81548160ff0219169083600281111561122357611222611290565b5b02179055505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061125f82611234565b9050919050565b61126f81611254565b82525050565b600060208201905061128a6000830184611266565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600381106112d0576112cf611290565b5b50565b60008190506112e1826112bf565b919050565b60006112f1826112d3565b9050919050565b611301816112e6565b82525050565b600060208201905061131c60008301846112f8565b92915050565b6000819050919050565b61133581611322565b82525050565b6000602082019050611350600083018461132c565b92915050565b6003811061136757611366611290565b5b50565b600081905061137882611356565b919050565b60006113888261136a565b9050919050565b6113988161137d565b82525050565b60006020820190506113b3600083018461138f565b92915050565b600080fd5b6113c781611254565b81146113d257600080fd5b50565b6000813590506113e4816113be565b92915050565b600060208284031215611400576113ff6113b9565b5b600061140e848285016113d5565b91505092915050565b6003811061142457600080fd5b50565b60008135905061143681611417565b92915050565b61144581611322565b811461145057600080fd5b50565b6000813590506114628161143c565b92915050565b6000806040838503121561147f5761147e6113b9565b5b600061148d85828601611427565b925050602061149e85828601611453565b9150509250929050565b600082825260208201905092915050565b7f4e6f7468696e6720746f20776974686472617700000000000000000000000000600082015250565b60006114ef6013836114a8565b91506114fa826114b9565b602082019050919050565b6000602082019050818103600083015261151e816114e2565b9050919050565b600060408201905061153a6000830185611266565b611547602083018461132c565b9392505050565b60008115159050919050565b6115638161154e565b811461156e57600080fd5b50565b6000815190506115808161155a565b92915050565b60006020828403121561159c5761159b6113b9565b5b60006115aa84828501611571565b91505092915050565b60006040820190506115c8600083018561138f565b6115d5602083018461132c565b9392505050565b7f4e6f7468696e6720746f20726562616c616e6365000000000000000000000000600082015250565b60006116126014836114a8565b915061161d826115dc565b602082019050919050565b6000602082019050818103600083015261164181611605565b9050919050565b600060408201905061165d600083018561138f565b61166a602083018461138f565b9392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006116cd6026836114a8565b91506116d882611671565b604082019050919050565b600060208201905081810360008301526116fc816116c0565b9050919050565b7f596f752073686f756c64207769746864726177206265666f72652072652d646560008201527f706f736974000000000000000000000000000000000000000000000000000000602082015250565b600061175f6025836114a8565b915061176a82611703565b604082019050919050565b6000602082019050818103600083015261178e81611752565b9050919050565b60006060820190506117aa6000830186611266565b6117b76020830185611266565b6117c4604083018461132c565b949350505050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006118026020836114a8565b915061180d826117cc565b602082019050919050565b60006020820190508181036000830152611831816117f5565b9050919050565b6000815190506118478161143c565b92915050565b600060208284031215611863576118626113b9565b5b600061187184828501611838565b91505092915050565b600060608201905061188f6000830186611266565b61189c602083018561132c565b6118a96040830184611266565b949350505050565b6000815190506118c0816113be565b92915050565b6000602082840312156118dc576118db6113b9565b5b60006118ea848285016118b1565b91505092915050565b6000819050919050565b600061ffff82169050919050565b6000819050919050565b600061193061192b611926846118f3565b61190b565b6118fd565b9050919050565b61194081611915565b82525050565b600060808201905061195b6000830187611266565b611968602083018661132c565b6119756040830185611266565b6119826060830184611937565b9594505050505056fea264697066735822122058f283e6d1cae0eafaf9ec17ea012f3b1b1972c8777d4c39701cfe56019b14c364736f6c63430008120033";

type AggregatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AggregatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Aggregator__factory extends ContractFactory {
  constructor(...args: AggregatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Aggregator> {
    return super.deploy(overrides || {}) as Promise<Aggregator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Aggregator {
    return super.attach(address) as Aggregator;
  }
  override connect(signer: Signer): Aggregator__factory {
    return super.connect(signer) as Aggregator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AggregatorInterface {
    return new utils.Interface(_abi) as AggregatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Aggregator {
    return new Contract(address, _abi, signerOrProvider) as Aggregator;
  }
}
