/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface AggregatorInterface extends utils.Interface {
  functions: {
    "AAVE_A_WETH_MAINNET_ADDRESS()": FunctionFragment;
    "AAVE_V3_MAINNET_POOL_ADDRESS_PROVIDER_ADDRESS()": FunctionFragment;
    "COMPOUND_V3_PROXY_MAINNET_ADDRESS()": FunctionFragment;
    "WETH_MAINNET_ADDRESS()": FunctionFragment;
    "deposit(uint8,uint256)": FunctionFragment;
    "fundsDepositedInto()": FunctionFragment;
    "getAavePoolAddress()": FunctionFragment;
    "owner()": FunctionFragment;
    "rebalance()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "AAVE_A_WETH_MAINNET_ADDRESS"
      | "AAVE_V3_MAINNET_POOL_ADDRESS_PROVIDER_ADDRESS"
      | "COMPOUND_V3_PROXY_MAINNET_ADDRESS"
      | "WETH_MAINNET_ADDRESS"
      | "deposit"
      | "fundsDepositedInto"
      | "getAavePoolAddress"
      | "owner"
      | "rebalance"
      | "renounceOwnership"
      | "transferOwnership"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "AAVE_A_WETH_MAINNET_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "AAVE_V3_MAINNET_POOL_ADDRESS_PROVIDER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "COMPOUND_V3_PROXY_MAINNET_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WETH_MAINNET_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundsDepositedInto",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAavePoolAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "rebalance", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "AAVE_A_WETH_MAINNET_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "AAVE_V3_MAINNET_POOL_ADDRESS_PROVIDER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "COMPOUND_V3_PROXY_MAINNET_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WETH_MAINNET_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundsDepositedInto",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAavePoolAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposit(uint8,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Rebalance(uint8,uint8)": EventFragment;
    "Withdrawal(uint8,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Rebalance"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface DepositEventObject {
  market: number;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<[number, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RebalanceEventObject {
  from: number;
  to: number;
}
export type RebalanceEvent = TypedEvent<[number, number], RebalanceEventObject>;

export type RebalanceEventFilter = TypedEventFilter<RebalanceEvent>;

export interface WithdrawalEventObject {
  market: number;
  amount: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [number, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface Aggregator extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AggregatorInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AAVE_A_WETH_MAINNET_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    AAVE_V3_MAINNET_POOL_ADDRESS_PROVIDER_ADDRESS(
      overrides?: CallOverrides
    ): Promise<[string]>;

    COMPOUND_V3_PROXY_MAINNET_ADDRESS(
      overrides?: CallOverrides
    ): Promise<[string]>;

    WETH_MAINNET_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      _market: PromiseOrValue<BigNumberish>,
      weth_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundsDepositedInto(overrides?: CallOverrides): Promise<[number]>;

    getAavePoolAddress(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  AAVE_A_WETH_MAINNET_ADDRESS(overrides?: CallOverrides): Promise<string>;

  AAVE_V3_MAINNET_POOL_ADDRESS_PROVIDER_ADDRESS(
    overrides?: CallOverrides
  ): Promise<string>;

  COMPOUND_V3_PROXY_MAINNET_ADDRESS(overrides?: CallOverrides): Promise<string>;

  WETH_MAINNET_ADDRESS(overrides?: CallOverrides): Promise<string>;

  deposit(
    _market: PromiseOrValue<BigNumberish>,
    weth_amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundsDepositedInto(overrides?: CallOverrides): Promise<number>;

  getAavePoolAddress(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  rebalance(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    AAVE_A_WETH_MAINNET_ADDRESS(overrides?: CallOverrides): Promise<string>;

    AAVE_V3_MAINNET_POOL_ADDRESS_PROVIDER_ADDRESS(
      overrides?: CallOverrides
    ): Promise<string>;

    COMPOUND_V3_PROXY_MAINNET_ADDRESS(
      overrides?: CallOverrides
    ): Promise<string>;

    WETH_MAINNET_ADDRESS(overrides?: CallOverrides): Promise<string>;

    deposit(
      _market: PromiseOrValue<BigNumberish>,
      weth_amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundsDepositedInto(overrides?: CallOverrides): Promise<number>;

    getAavePoolAddress(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    rebalance(overrides?: CallOverrides): Promise<number>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Deposit(uint8,uint256)"(market?: null, amount?: null): DepositEventFilter;
    Deposit(market?: null, amount?: null): DepositEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Rebalance(uint8,uint8)"(from?: null, to?: null): RebalanceEventFilter;
    Rebalance(from?: null, to?: null): RebalanceEventFilter;

    "Withdrawal(uint8,uint256)"(
      market?: null,
      amount?: null
    ): WithdrawalEventFilter;
    Withdrawal(market?: null, amount?: null): WithdrawalEventFilter;
  };

  estimateGas: {
    AAVE_A_WETH_MAINNET_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    AAVE_V3_MAINNET_POOL_ADDRESS_PROVIDER_ADDRESS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    COMPOUND_V3_PROXY_MAINNET_ADDRESS(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    WETH_MAINNET_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      _market: PromiseOrValue<BigNumberish>,
      weth_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundsDepositedInto(overrides?: CallOverrides): Promise<BigNumber>;

    getAavePoolAddress(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    AAVE_A_WETH_MAINNET_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    AAVE_V3_MAINNET_POOL_ADDRESS_PROVIDER_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    COMPOUND_V3_PROXY_MAINNET_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WETH_MAINNET_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _market: PromiseOrValue<BigNumberish>,
      weth_amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundsDepositedInto(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAavePoolAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebalance(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
